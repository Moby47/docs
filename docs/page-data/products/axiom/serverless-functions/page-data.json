{"componentChunkName":"component---src-templates-docs-js","path":"/products/axiom/serverless-functions","result":{"data":{"site":{"siteMetadata":{"title":"Hypi Documentation","docsLocation":"https://github.com/hypi-universe/docs/tree/master/content"}},"mdx":{"fields":{"id":"5d8f3c1a-8b0f-56e7-b4cc-e637fb55bcc4","title":"Serverless functions","slug":"/products/00-axiom/07-serverless-functions"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Serverless functions\",\n  \"metaTitle\": \"Hypi Platform Serverless Functions Documentation\",\n  \"metaDescription\": \"Hypi platform documentation for its serverless functions support\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Overview\"), mdx(\"p\", null, \"Serverless technology are a means of adding custom behaviour without having to worry too much about infrastructure, deployment or maintenance.\"), mdx(\"h3\", null, \"How to setup and use a serverless?\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Create an App\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Get App ID\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Create Serverless\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Define @tan directive\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Trigger Function\")), mdx(\"h2\", null, \"Create an App\"), mdx(\"p\", null, \"Reference the create app guide \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/products/axiom/app\"\n  }), \"Hypi Platform App Documentation\")), mdx(\"h2\", null, \"Get App ID\"), mdx(\"p\", null, \"Run the following GraphQL query to retrieve the App ID available as hypi.id. Note that the query returns multiple apps in your realm, so pick the one related the App that you have just created in the previous step.\"), mdx(\"div\", {\n    className: \"code-container\"\n  }, mdx(\"div\", {\n    className: \"code-column\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"{\\n  find(type: App, arcql:\\\"*\\\"){\\n    edges{\\n      node{\\n        ... on App {\\n          name\\n          releases{\\n            hypi {\\n              id\\n            }\\n            name\\n          }\\n        }\\n      }\\n      cursor\\n    }\\n  }\\n}\\n\")))), mdx(\"h2\", null, \"Create Serverless\"), mdx(\"p\", null, \"At this point, you are ready to create the Serverless function. In order to create a serverless you should already have a containerized image  ready to deploy available either in a public or a private docker registry.\"), mdx(\"div\", {\n    className: \"code-container\"\n  }, mdx(\"div\", {\n    className: \"code-column\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"mutation upsert($values:HypiUpsertInputUnion!) {\\n  upsert(values:$values){\\n    id\\n  }\\n}\\n\")))), mdx(\"p\", null, \"Under the query variables, you can supply the actual parameters. Note that the parameters are a typical JSON payload. The values supplied here are for illustrative purposes only, and you need to edit them to match your use case.\"), mdx(\"div\", {\n    className: \"code-container\"\n  }, mdx(\"div\", {\n    className: \"code-column\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"{\\n  \\\"values\\\": {\\n    \\\"App\\\": {\\n      \\\"name\\\": \\\"test-serverless\\\",\\n      \\\"hypi\\\": {\\n        \\\"id\\\": \\\"01EJX6A9VWTV3EMDKRMW9G757X\\\"\\n      },\\n      \\\"releases\\\": [\\n        {\\n          \\\"name\\\": \\\"initial\\\",\\n          \\\"hypi\\\": {\\n            \\\"id\\\": \\\"01EJX6BHM5YDNX30DWTNWJB5DH\\\"\\n          },\\n          \\\"serverless\\\": {\\n            \\\"hypi\\\": {\\n              \\\"impl\\\": \\\"OpenFaaSFn\\\"\\n            },\\n            \\\"image\\\": \\\"functions/alpine:latest\\\",\\n            \\\"name\\\": \\\"echo-app\\\",\\n            \\\"credentials\\\": {\\n              \\\"server\\\": \\\"hub.docker.com\\\",\\n              \\\"username\\\": \\\"example\\\",\\n              \\\"password\\\": \\\"example\\\"\\n          }\\n        }\\n      ]\\n    }\\n  }\\n}\\n\")))), mdx(\"h4\", null, \"Verify that the serverless was created\"), mdx(\"p\", null, \"In order to double check that the serverless was created successfully, then run the following GraphQL query and make sure that the serverless name exists in the retrieved list.\"), mdx(\"div\", {\n    className: \"code-container\"\n  }, mdx(\"div\", {\n    className: \"code-column\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"{\\n  find(type: App, arcql:\\\"*\\\"){\\n    edges{\\n      node{\\n        ... on App {\\n          name\\n          releases{\\n            name\\n            serverless{\\n              ... on OpenFaaSFn{\\n                name\\n                image\\n                credentials {\\n                  server\\n                  username\\n                  password\\n                }\\n              }\\n            }\\n          }\\n        }\\n      }\\n      cursor\\n    }\\n  }\\n}\\n\")))), mdx(\"h2\", null, \"Define @tan directive\"), mdx(\"p\", null, \"Before you start using the serverless function, you need to define a GraphQL query type that provides the parameters of the function. Here is an example definition.\"), mdx(\"div\", {\n    className: \"code-container\"\n  }, mdx(\"div\", {\n    className: \"code-column\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"type Query {\\n    f1(a:String!, b: Int!, c:Boolean!):EchoType @tan(type:OpenFaaS, name:\\\"echoit\\\", handler:\\\"cat\\\")\\n}\\n\\ntype EchoType {\\n        a: String\\n        b: Int\\n        c: Boolean\\n}\\n\")))), mdx(\"p\", null, \"This has just defined a @tan function that accepts 3 parameters of types String, Integer, and Boolean. It returns a JSON object.\\nThe @tan directive has a few options; type, name, handler, and saveAs. They are explained below:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"type: instructs the system on which serverless backend to use, currently OpenFaaS is available as well as inline scripts written in Groovy or Velocity.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"name: the name field should match the name provided under the GraphQL \\\"serverless\\\" object.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"handler: is the script/entrypoint to execute inside the container. For example, \\\"python main.py -env=prod\\\" or \\\"go run quickstart.go\\\" ... etc.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"saveAs: instructs the Hypi platform to persist the result of the serverless function call as a GraphQL type in the database. For example, saveAs: \\\"ServerlessResponse\\\".\")), mdx(\"p\", null, \"Observe here how the @tan directive is instructed to return payload of user-defined type \\\"EchoType\\\". Thus, any user-defined type can be returned.\"), mdx(\"h2\", null, \"Trigger Function\"), mdx(\"p\", null, \"It is now time to run the function and pass some real values and obtain the results. Using a query like this:\"), mdx(\"div\", {\n    className: \"code-container\"\n  }, mdx(\"div\", {\n    className: \"code-column\"\n  }, mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Request\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"query{\\n    f1(a:\\\"Hello, @tan\\\", b:2329, c:true) {\\n        a\\n        b\\n        c\\n    }\\n}\\n\"))), mdx(\"div\", {\n    className: \"code-column\"\n  }, mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Response\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"{\\n  \\\"data\\\": {\\n    \\\"f1\\\": {\\n      \\\"a\\\": \\\"Hello, @tan\\\",\\n      \\\"b\\\": 2329,\\n      \\\"c\\\": true\\n    }\\n  }\\n}\\n\")))));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#overview","title":"Overview","items":[{"url":"#how-to-setup-and-use-a-serverless","title":"How to setup and use a serverless?"}]},{"url":"#create-an-app","title":"Create an App"},{"url":"#get-app-id","title":"Get App ID"},{"url":"#create-serverless","title":"Create Serverless","items":[{"items":[{"url":"#verify-that-the-serverless-was-created","title":"Verify that the serverless was created"}]}]},{"url":"#define-tan-directive","title":"Define @tan directive"},{"url":"#trigger-function","title":"Trigger Function"}]},"parent":{"__typename":"File","relativePath":"products/00-axiom/07-serverless-functions.md"},"frontmatter":{"metaTitle":"Hypi Platform Serverless Functions Documentation","metaDescription":"Hypi platform documentation for its serverless functions support"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/404","title":"Page Not Found"}}},{"node":{"fields":{"slug":"/products","title":"Products"}}},{"node":{"fields":{"slug":"/reference","title":"Reference"}}},{"node":{"fields":{"slug":"/recipes","title":"Recipes"}}},{"node":{"fields":{"slug":"/tutorials","title":"Tutorials"}}},{"node":{"fields":{"slug":"/tutorials/04-dateGranularity","title":"Timeseries Aggregations with Date Granularity"}}},{"node":{"fields":{"slug":"/FAQs","title":"FAQs"}}},{"node":{"fields":{"slug":"/introduction","title":"Introduction to Hypi"}}},{"node":{"fields":{"slug":"/","title":"Hypi Platform Documentation"}}},{"node":{"fields":{"slug":"/products/00-axiom","title":"Axiom"}}},{"node":{"fields":{"slug":"/products/00-axiom/00-api","title":"API Setup"}}},{"node":{"fields":{"slug":"/products/00-axiom/03-math-api","title":"Math API"}}},{"node":{"fields":{"slug":"/products/00-axiom/01-app","title":"Apps"}}},{"node":{"fields":{"slug":"/products/00-axiom/02-crud","title":"CRUD"}}},{"node":{"fields":{"slug":"/products/00-axiom/06-user-defined-functions","title":"User Defined Functions"}}},{"node":{"fields":{"slug":"/products/00-axiom/04-aggregations-api","title":"Aggregations API"}}},{"node":{"fields":{"slug":"/products/00-axiom/07-serverless-functions","title":"Serverless functions"}}},{"node":{"fields":{"slug":"/products/00-axiom/07-workflow","title":"Workflows"}}},{"node":{"fields":{"slug":"/products/00-axiom/08-triggers","title":"Triggers"}}},{"node":{"fields":{"slug":"/products/00-axiom/10-permission-and-authorisation","title":"Authorisation"}}},{"node":{"fields":{"slug":"/products/00-axiom/09-webhooks","title":"Webhooks"}}},{"node":{"fields":{"slug":"/products/00-axiom/10-permission-and-authorisation/00-resource-based-permission","title":"Resource Based Permission Permission"}}},{"node":{"fields":{"slug":"/products/00-axiom/11-rest-api","title":"RESTful APIs"}}},{"node":{"fields":{"slug":"/products/02-iot","title":"IoT"}}},{"node":{"fields":{"slug":"/products/01-api-gateway","title":"API Gateway"}}},{"node":{"fields":{"slug":"/products/03-analytics","title":"Analytics"}}},{"node":{"fields":{"slug":"/recipes/01-login","title":"Logging into a Hypi app"}}},{"node":{"fields":{"slug":"/recipes/02-create-account","title":"Create an account"}}},{"node":{"fields":{"slug":"/reference/01-graphql","title":"GraphQL"}}},{"node":{"fields":{"slug":"/reference/01-graphql/02-query","title":"Queries"}}},{"node":{"fields":{"slug":"/recipes/03-build-todo-app","title":"Build a todo app"}}},{"node":{"fields":{"slug":"/reference/00-instance","title":"Instances"}}},{"node":{"fields":{"slug":"/reference/01-graphql/01-intro","title":"Introduction"}}},{"node":{"fields":{"slug":"/reference/01-graphql/03-mutation","title":"Mutations"}}},{"node":{"fields":{"slug":"/reference/01-graphql/04-subscription","title":"Subscriptions"}}},{"node":{"fields":{"slug":"/reference/01-graphql/06-directives","title":"Directives"}}},{"node":{"fields":{"slug":"/reference/01-graphql/07-interfaces","title":"Interfaces"}}},{"node":{"fields":{"slug":"/reference/01-graphql/05-hypi-object","title":"Magic Hypi Object"}}},{"node":{"fields":{"slug":"/reference/04-authorisation/01-permissions","title":"Permissions"}}},{"node":{"fields":{"slug":"/reference/04-authorisation/02-policies","title":"Policies"}}},{"node":{"fields":{"slug":"/reference/02-arcql","title":"ArcQL Filtering"}}},{"node":{"fields":{"slug":"/reference/04-graph","title":"Graph Queries"}}},{"node":{"fields":{"slug":"/tutorials/01-registration-and-login","title":"Registration & Login"}}},{"node":{"fields":{"slug":"/tutorials/03-crud","title":"Hypi GraphQL CRUD Tutorial"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"5d8f3c1a-8b0f-56e7-b4cc-e637fb55bcc4"}}}